%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Tue Jan  8 18:06:57 2013
%%Title: /home/ed/masters/Electronics/gripper.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
false false false false 260.000000 [(Gripper Control \(Arduino/Solenoid Valve\)) ] 0 50000 40800 180.555557 text
grestore
gsave
false false false false 260.000000 [(Ed Venator \(esv@case.edu\)) ] 0 53900 40100 180.555557 text
grestore
gsave
48400 48300 48100 48300 10 line
gsave
false true true false 260.000000 [(VIN) ] 0 48050 48300 180.555557 text
grestore
gsave
false false false false 208.000000 [(16) ] 0 48200 48350 144.444443 text
grestore
48400 48100 48100 48100 10 line
gsave
false true true false 260.000000 [(GND) ] 0 48050 48100 180.555557 text
grestore
gsave
false false false false 208.000000 [(17) ] 0 48200 48150 144.444443 text
grestore
48400 47900 48100 47900 10 line
gsave
false true true false 260.000000 [(RESET) ] 0 48050 47900 180.555557 text
grestore
gsave
false false false false 208.000000 [(18) ] 0 48200 47950 144.444443 text
grestore
48400 47700 48100 47700 10 line
gsave
false true true false 260.000000 [(+5V) ] 0 48050 47700 180.555557 text
grestore
gsave
false false false false 208.000000 [(19) ] 0 48200 47750 144.444443 text
grestore
48400 47500 48100 47500 10 line
gsave
false true true false 260.000000 [(A0) ] 0 48050 47500 180.555557 text
grestore
gsave
false false false false 208.000000 [(20) ] 0 48200 47550 144.444443 text
grestore
48400 47300 48100 47300 10 line
gsave
false true true false 260.000000 [(A1) ] 0 48050 47300 180.555557 text
grestore
gsave
false false false false 208.000000 [(21) ] 0 48200 47350 144.444443 text
grestore
48400 47100 48100 47100 10 line
gsave
false true true false 260.000000 [(A2) ] 0 48050 47100 180.555557 text
grestore
gsave
false false false false 208.000000 [(22) ] 0 48200 47150 144.444443 text
grestore
48400 46900 48100 46900 10 line
gsave
false true true false 260.000000 [(A3) ] 0 48050 46900 180.555557 text
grestore
gsave
false false false false 208.000000 [(23) ] 0 48200 46950 144.444443 text
grestore
48400 46700 48100 46700 10 line
gsave
false true true false 260.000000 [(A4) ] 0 48050 46700 180.555557 text
grestore
gsave
false false false false 208.000000 [(24) ] 0 48200 46750 144.444443 text
grestore
48400 46500 48100 46500 10 line
gsave
false true true false 260.000000 [(A5) ] 0 48050 46500 180.555557 text
grestore
gsave
false false false false 208.000000 [(25) ] 0 48200 46550 144.444443 text
grestore
48400 46300 48100 46300 10 line
gsave
false true true false 260.000000 [(A6) ] 0 48050 46300 180.555557 text
grestore
gsave
false false false false 208.000000 [(26) ] 0 48200 46350 144.444443 text
grestore
48400 46100 48100 46100 10 line
gsave
false true true false 260.000000 [(A7) ] 0 48050 46100 180.555557 text
grestore
gsave
false false false false 208.000000 [(27) ] 0 48200 46150 144.444443 text
grestore
48400 45900 48100 45900 10 line
gsave
false true true false 260.000000 [(AREF) ] 0 48050 45900 180.555557 text
grestore
gsave
false false false false 208.000000 [(28) ] 0 48200 45950 144.444443 text
grestore
48400 45700 48100 45700 10 line
gsave
false true true false 260.000000 [(3V3) ] 0 48050 45700 180.555557 text
grestore
gsave
false false false false 208.000000 [(29) ] 0 48200 45750 144.444443 text
grestore
48400 45500 48100 45500 10 line
gsave
false true true false 260.000000 [(D13) ] 0 48050 45500 180.555557 text
grestore
gsave
false false false false 208.000000 [(30) ] 0 48200 45550 144.444443 text
grestore
45400 48300 45700 48300 10 line
gsave
false false true false 260.000000 [(D1/TX) ] 0 45750 48300 180.555557 text
grestore
gsave
false true false false 208.000000 [(1) ] 0 45600 48350 144.444443 text
grestore
45400 48100 45700 48100 10 line
gsave
false false true false 260.000000 [(D0/RX) ] 0 45750 48100 180.555557 text
grestore
gsave
false true false false 208.000000 [(2) ] 0 45600 48150 144.444443 text
grestore
45400 47900 45700 47900 10 line
gsave
false false true false 260.000000 [(RESET) ] 0 45750 47900 180.555557 text
grestore
gsave
false true false false 208.000000 [(3) ] 0 45600 47950 144.444443 text
grestore
45400 47700 45700 47700 10 line
gsave
false false true false 260.000000 [(GND) ] 0 45750 47700 180.555557 text
grestore
gsave
false true false false 208.000000 [(4) ] 0 45600 47750 144.444443 text
grestore
45400 47500 45700 47500 10 line
gsave
false false true false 260.000000 [(D2) ] 0 45750 47500 180.555557 text
grestore
gsave
false true false false 208.000000 [(5) ] 0 45600 47550 144.444443 text
grestore
45400 47300 45700 47300 10 line
gsave
false false true false 260.000000 [(D3) ] 0 45750 47300 180.555557 text
grestore
gsave
false true false false 208.000000 [(6) ] 0 45600 47350 144.444443 text
grestore
45400 47100 45700 47100 10 line
gsave
false false true false 260.000000 [(D4) ] 0 45750 47100 180.555557 text
grestore
gsave
false true false false 208.000000 [(7) ] 0 45600 47150 144.444443 text
grestore
45400 46900 45700 46900 10 line
gsave
false false true false 260.000000 [(D5) ] 0 45750 46900 180.555557 text
grestore
gsave
false true false false 208.000000 [(8) ] 0 45600 46950 144.444443 text
grestore
45400 46700 45700 46700 10 line
gsave
false false true false 260.000000 [(D6) ] 0 45750 46700 180.555557 text
grestore
gsave
false true false false 208.000000 [(9) ] 0 45600 46750 144.444443 text
grestore
45400 46500 45700 46500 10 line
gsave
false false true false 260.000000 [(D7) ] 0 45750 46500 180.555557 text
grestore
gsave
false true false false 208.000000 [(10) ] 0 45600 46550 144.444443 text
grestore
45400 46300 45700 46300 10 line
gsave
false false true false 260.000000 [(D8) ] 0 45750 46300 180.555557 text
grestore
gsave
false true false false 208.000000 [(11) ] 0 45600 46350 144.444443 text
grestore
45400 46100 45700 46100 10 line
gsave
false false true false 260.000000 [(D9) ] 0 45750 46100 180.555557 text
grestore
gsave
false true false false 208.000000 [(12) ] 0 45600 46150 144.444443 text
grestore
45400 45900 45700 45900 10 line
gsave
false false true false 260.000000 [(D10) ] 0 45750 45900 180.555557 text
grestore
gsave
false true false false 208.000000 [(13) ] 0 45600 45950 144.444443 text
grestore
45400 45700 45700 45700 10 line
gsave
false false true false 260.000000 [(D11) ] 0 45750 45700 180.555557 text
grestore
gsave
false true false false 208.000000 [(14) ] 0 45600 45750 144.444443 text
grestore
45400 45500 45700 45500 10 line
gsave
false false true false 260.000000 [(D12) ] 0 45750 45500 180.555557 text
grestore
gsave
false true false false 208.000000 [(15) ] 0 45600 45550 144.444443 text
grestore
46400 44800 46400 45100 10 line
gsave
false false false false 260.000000 [(USB +5) ] 90 46400 45155 180.555557 text
grestore
gsave
false false false true 260.000000 [(31) ] 0 46195 44950 180.555557 text
grestore
46700 44800 46700 45100 10 line
gsave
false false false false 260.000000 [(USB D+) ] 90 46700 45155 180.555557 text
grestore
gsave
false false false true 260.000000 [(32) ] 0 46495 44950 180.555557 text
grestore
47000 44800 47000 45100 10 line
gsave
false false false false 260.000000 [(USB D-) ] 90 47000 45155 180.555557 text
grestore
gsave
false false false true 260.000000 [(33) ] 0 46795 44950 180.555557 text
grestore
47300 44800 47300 45100 10 line
gsave
false false false false 260.000000 [(USB GND) ] 90 47300 45155 180.555557 text
grestore
gsave
false false false true 260.000000 [(34) ] 0 47095 44950 180.555557 text
grestore
45700 45100 48100 45100 10 line
48100 45100 48100 48500 10 line
48100 48500 45700 48500 10 line
45700 48500 45700 45100 10 line
grestore
gsave
true false false false 260.000000 [(P1) ] 0 47800 48600 180.555557 text
grestore
gsave
45000 44000 45300 44000 10 line
gsave
false false false false 208.000000 [(3) ] 0 43850 43950 144.444443 text
grestore
45000 44300 45300 44300 10 line
gsave
false false false false 208.000000 [(2) ] 0 43850 44250 144.444443 text
grestore
45000 43700 45300 43700 10 line
gsave
false false false false 208.000000 [(4) ] 0 43850 43650 144.444443 text
grestore
45000 44300 44100 44300 10 line
45000 44000 44100 44000 10 line
45000 43700 44100 43700 10 line
45000 44600 45300 44600 10 line
gsave
false false false false 208.000000 [(1) ] 0 43850 44550 144.444443 text
grestore
45000 44600 44100 44600 10 line
43600 43500 44100 43500 10 line
44100 43500 44100 44800 10 line
44100 44800 43600 44800 10 line
43600 44800 43600 43500 10 line
grestore
gsave
false false false false 260.000000 [(USB) ] 0 43600 44900 180.555557 text
grestore
45300 44600 46400 44600 10 line
46400 44600 46400 44800 10 line
46700 44800 46700 44300 10 line
46700 44300 45300 44300 10 line
45300 44000 47000 44000 10 line
47000 44000 47000 44800 10 line
47300 44800 47300 43700 10 line
47300 43700 45300 43700 10 line
gsave
48800 47700 48800 47900 10 line
48700 47700 48900 47700 10 line
48755 47650 48845 47650 10 line
48780 47610 48820 47610 10 line
grestore
48400 48100 48800 48100 10 line
48800 48100 48800 47900 10 line
50500 46100 52000 46100 10 line
52000 46100 52000 47300 10 line
52000 47300 50500 47300 10 line
50500 47300 50500 46100 10 line
50200 47000 50500 47000 10 line
gsave
false false false false 260.000000 [(+) ] 0 50555 46995 180.555557 text
grestore
gsave
false true false false 260.000000 [(1) ] 0 50405 47045 180.555557 text
grestore
50200 46800 50500 46800 10 line
gsave
false false false false 260.000000 [(-) ] 0 50555 46795 180.555557 text
grestore
gsave
false true false false 260.000000 [(2) ] 0 50405 46845 180.555557 text
grestore
50200 46600 50500 46600 10 line
gsave
false false false false 260.000000 [(NC) ] 0 50555 46595 180.555557 text
grestore
gsave
false true false false 260.000000 [(3) ] 0 50405 46645 180.555557 text
grestore
50200 46400 50500 46400 10 line
gsave
false false false false 260.000000 [(NC) ] 0 50555 46395 180.555557 text
grestore
gsave
false true false false 260.000000 [(4) ] 0 50405 46445 180.555557 text
grestore
gsave
49350 45900 49600 45900 10 line
49350 45500 49600 45500 10 line
49350 45700 49450 45750 10 line
49350 45700 49450 45650 10 line
49100 45500 49300 45500 10 line
49600 45900 49600 46100 10 line
49600 45500 49600 45300 10 line
49350 45975 49350 45825 10 line
49350 45775 49350 45625 10 line
49350 45575 49350 45425 10 line
49300 45900 49300 45500 10 line
49350 45700 49500 45700 10 line
49500 45700 49500 45500 10 line
grestore
gsave
false false false false 260.000000 [(Q1) ] 0 49700 45700 180.555557 text
grestore
gsave
49400 46400 49800 46400 10 line
49400 46400 49600 46700 10 line
49600 46700 49800 46400 10 line
49400 46700 49800 46700 10 line
49600 46100 49600 46300 10 line
49600 47000 49600 46800 10 line
49600 46800 49600 46700 10 line
49600 46400 49600 46300 10 line
49400 46750 50 90 270 10 darc
49800 46650 50 270 450 10 darc
grestore
gsave
false true false true 260.000000 [(D1) ] 0 49200 46700 180.555557 text
grestore
gsave
49600 47000 49600 47200 10 line
49450 47200 49750 47200 10 line
grestore
gsave
true false false false 260.000000 [(+13.8v) ] 0 49600 47250 180.555557 text
grestore
49600 47000 50200 47000 10 line
50200 46800 50000 46800 10 line
50000 46100 50000 46800 10 line
50000 46100 49600 46100 10 line
48400 45500 49100 45500 10 line
gsave
49600 45100 49600 45300 10 line
49500 45100 49700 45100 10 line
49555 45050 49645 45050 10 line
49580 45010 49620 45010 10 line
grestore
gsave
false false false false 260.000000 [(Solenoid) ] 0 51000 46700 180.555557 text
grestore
gsave
43500 46300 43700 46300 10 line
42900 46400 42900 46200 10 line
42900 46400 43400 46400 10 line
43400 46400 43500 46300 10 line
43500 46300 43400 46200 10 line
43400 46200 42900 46200 10 line
grestore
gsave
false true true false 260.000000 [(13.8v) ] 0 42800 46300 180.555557 text
grestore
gsave
43500 45800 43700 45800 10 line
42900 45900 42900 45700 10 line
42900 45900 43400 45900 10 line
43400 45900 43500 45800 10 line
43500 45800 43400 45700 10 line
43400 45700 42900 45700 10 line
grestore
gsave
false true true false 260.000000 [(GND) ] 0 42800 45800 180.555557 text
grestore
gsave
43700 45600 43700 45800 10 line
43600 45600 43800 45600 10 line
43655 45550 43745 45550 10 line
43680 45510 43720 45510 10 line
grestore
gsave
43700 46300 43700 46500 10 line
43550 46500 43850 46500 10 line
grestore
gsave
true false false false 260.000000 [(+13.8v) ] 0 43700 46550 180.555557 text
grestore
gsave
false false false false 260.000000 [(Arduino Duemilanove) ] 0 45600 48600 180.555557 text
grestore
newpath
49600 47000
25
0 360 arc
fill
newpath
49600 46100
25
0 360 arc
fill
showpage
%%End
